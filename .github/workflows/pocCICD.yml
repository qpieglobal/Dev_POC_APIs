name: 'Poc workflow'

# **What it does**: checks the files pushed into main branch and prints the files recently modified.

on:
  push:
    branches:
      - main
    paths:
      '**IL'
  pull_request:
    branches:
      - main
    paths:
      '**IL'

jobs:
  check-out-files:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v35

      - name: List all added/modified IL files
        #shell: bash
        id: list-IL-files
        run: |
          export var_il_list=
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            echo "${file} was changed"
            ls -ltr ${GITHUB_WORKSPACE}/${file}
            if [ "`echo ${file} | rev | cut -c 1-3 | rev`" = ".IL" ]; then
              export var_il_list=`echo ${var_il_list} ${GITHUB_WORKSPACE}/${file}`
            fi
          done
          echo il_list=${var_il_list} >> $GITHUB_OUTPUT
          
      - name: Validate script names in IL files
        run: |
          var_il_list=`echo ${{ steps.list-IL-files.outputs.il_list }}`
          echo "IL LIST: ${var_il_list}"
          if [ "${var_il_list}" != "" ]; then
            for il in ${var_il_list}
            do
              export err=0
              for fname in ${il}
              do
                var_file=`echo ${fname} | awk -F: '{print $2}'`
                if [ `ls ${GITHUB_WORKSPACE}/${var_file} | wc -l` -eq 0 ]; then
                 echo ${il}: ${var_file} does not exists
                 export err=`expr ${err} + 1`
                fi
              done
             done
             echo "err: ${err}"
             if [ "${err}" = "0" ]; then
               echo "IL validation completed successfully..."
             else
               echo "Errors while validating IL files"
               exit 1
             fi
          else
            echo "Skipping validation..."
          fi
          
      - name: Create build for each IL
        run: |
          var_il_list=`echo ${{ steps.list-IL-files.outputs.il_list }}`
          export builds=
          mkdir ~/builds
          tar_dir=~/builds
          if [ "${var_il_list}" != "" ]; then
            for j in ${var_il_list}
            do
              tar_name=${tar_dir}/`echo ${j} | awk -F. '{print $1}'`.tar
              chmod 777 ${GITHUB_WORKSPACE}/${j}
              ls -ltr ${GITHUB_WORKSPACE}/${j}
              for fname in ${j}
              do
                var_file=${GITHUB_WORKSPACE}/`echo ${fname} | awk -F: '{print $2}'`
                export var_files=`echo ${var_files} ${var_file}`
              done
              tar -cf ${tar_name} ${var_files}
              if [ $? -eq 0 ]; then
                export builds=`echo ${builds} ${tar_name}`
              else
                echo "Error while creating ${tar_name}"
                exit 1
              fi
             done
             echo "Builds created successfully: ${builds}"
             ls -ltr ${tar_dir}
           else
             echo "Skipping build creation..."
           fi
